var VueIntersectDirective=function(e,t){"use strict";var n=function(){return n=Object.assign||function(e){for(var t,n=1,i=arguments.length;n<i;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},n.apply(this,arguments)};function i(e,t,n,i){return new(n||(n=Promise))((function(o,r){function s(e){try{a(i.next(e))}catch(e){r(e)}}function l(e){try{a(i.throw(e))}catch(e){r(e)}}function a(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,l)}a((i=i.apply(e,t||[])).next())}))}function o(e,t){var n,i,o,r,s={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return r={next:l(0),throw:l(1),return:l(2)},"function"==typeof Symbol&&(r[Symbol.iterator]=function(){return this}),r;function l(l){return function(a){return function(l){if(n)throw new TypeError("Generator is already executing.");for(;r&&(r=0,l[0]&&(s=0)),s;)try{if(n=1,i&&(o=2&l[0]?i.return:l[0]?i.throw||((o=i.return)&&o.call(i),0):i.next)&&!(o=o.call(i,l[1])).done)return o;switch(i=0,o&&(l=[2&l[0],o.value]),l[0]){case 0:case 1:o=l;break;case 4:return s.label++,{value:l[1],done:!1};case 5:s.label++,i=l[1],l=[0];continue;case 7:l=s.ops.pop(),s.trys.pop();continue;default:if(!(o=s.trys,(o=o.length>0&&o[o.length-1])||6!==l[0]&&2!==l[0])){s=0;continue}if(3===l[0]&&(!o||l[1]>o[0]&&l[1]<o[3])){s.label=l[1];break}if(6===l[0]&&s.label<o[1]){s.label=o[1],o=l;break}if(o&&s.label<o[2]){s.label=o[2],s.ops.push(l);break}o[2]&&s.ops.pop(),s.trys.pop();continue}l=t.call(e,s)}catch(e){l=[6,e],i=0}finally{n=o=0}if(5&l[0])throw l[1];return{value:l[0]?l[1]:void 0,done:!0}}([l,a])}}}"function"==typeof SuppressedError&&SuppressedError;var r=function(){function e(){}return e.prototype.bind=function(e,r){return i(this,void 0,void 0,(function(){var i,s,l,a,u,c,p;return o(this,(function(o){switch(o.label){case 0:return[4,t.nextTick()];case 1:return o.sent(),i=r.dir.globalOptions||{},s=n({},null===(l=r.value)||void 0===l?void 0:l.observerOptions),this.interSectionObserver=new IntersectionObserver(this.onIntersectChange.bind(this),s),this.interSectionObserver.observe(e),this.el=e,this.options={true:(null===(a=r.value)||void 0===a?void 0:a.true)||(null==i?void 0:i.true),false:(null===(u=r.value)||void 0===u?void 0:u.false)||(null==i?void 0:i.false),disposeWhen:(null===(c=r.value)||void 0===c?void 0:c.disposeWhen)||(null==i?void 0:i.disposeWhen)},this.callback=(null===(p=r.value)||void 0===p?void 0:p.onChange)||(null==i?void 0:i.onChange),[2]}}))}))},e.prototype.unbind=function(e,t){this.interSectionObserver&&this.interSectionObserver.unobserve(e)},e.prototype.onIntersectChange=function(e,t){var n=e[0];n&&(n.isIntersecting?(this.options.true&&this.addStyleOptions(this.options.true),this.options.false&&this.removeStyleOptions(this.options.false)):(this.options.true&&this.removeStyleOptions(this.options.true),this.options.false&&this.addStyleOptions(this.options.false)),this.callback&&this.callback(n.isIntersecting,this.el,this.options),void 0!==this.options.disposeWhen&&n.isIntersecting===this.options.disposeWhen&&this.unbind(this.el))},e.prototype.addStyleOptions=function(e){var t;if(Array.isArray(e))(t=this.el.classList).add.apply(t,e);else if("string"==typeof e)this.el.classList.add(e);else for(var n=0,i=Object.keys(e);n<i.length;n++){var o=i[n];console.log(o,e),this.el.style[o]=e[o]}},e.prototype.removeStyleOptions=function(e){var t;if(Array.isArray(e))(t=this.el.classList).remove.apply(t,e);else if("string"==typeof e)this.el.classList.remove(e);else for(var n=0,i=Object.keys(e);n<i.length;n++){var o=i[n];this.el.style.removeProperty(o)}},e}(),s=new Map,l={beforeMount:function(e,t){var n=new r;s.set(e,n),n.bind(e,t)},unmounted:function(e,t){var n=s.get(e);n&&n.unbind(e,t)},getSSRProps:function(){return{}}},a=function(e){return n(n({},l),{globalOptions:e})},u={install:function(e,t){e.directive("intersect",a(t))}};return"undefined"!=typeof window&&window.Vue&&window.Vue.use(u.install),e.IntersectDirective=l,e.createIntersectDirective=a,e.default=u,Object.defineProperty(e,"__esModule",{value:!0}),e}({},Vue);
